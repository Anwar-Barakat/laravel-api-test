## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Management'
description: |-

  APIs to manage the user resource.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs to manage the user resource.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of users.'
      description: 'Get a list of users.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      page_size:
        name: page_size
        description: 'Size per page. Defaults to 20.'
        required: false
        example: 20
        type: integer
        custom: []
      page:
        name: page
        description: 'Page to view.'
        required: false
        example: 1
        type: integer
        custom: []
    cleanQueryParameters:
      page_size: 20
      page: 1
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":19,"name":"Osborne Mohr","email":"rferry@example.net","created_at":"2023-08-25"},{"id":20,"name":"Madalyn Wyman","email":"zskiles@example.net","created_at":"2023-08-25"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs to manage the user resource.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created resource in storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the user. Example : John Doe'
        required: true
        example: nam
        type: string
        custom: []
      email:
        name: email
        description: 'Email of the user. Example : john@example.com'
        required: true
        example: vaufderhar@example.org
        type: string
        custom: []
    cleanBodyParameters:
      name: nam
      email: vaufderhar@example.org
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":21,"name":"Aisha Gerhold","email":"lauriane.connelly@example.net","created_at":"2023-08-25"},{"id":22,"name":"Jayne Pouros","email":"florian.skiles@example.org","created_at":"2023-08-25"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs to manage the user resource.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified user.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
      id:
        name: id
        description: 'User ID'
        required: true
        example: 8
        type: integer
        custom: []
    cleanUrlParameters:
      user_id: 1
      id: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":23,"name":"Johann Okuneva","email":"kilback.dexter@example.net","created_at":"2023-08-25"},{"id":24,"name":"Nicolette Swaniawski","email":"alaina.kozey@example.net","created_at":"2023-08-25"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs to manage the user resource.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified resource in storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Name of the user. Example : John Doe'
        required: false
        example: temporibus
        type: string
        custom: []
    cleanBodyParameters:
      name: temporibus
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":25,"name":"Walter Runte","email":"gkuphal@example.com","created_at":"2023-08-25"},{"id":26,"name":"Zachariah Koss","email":"zella25@example.com","created_at":"2023-08-25"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs to manage the user resource.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified resource from storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data" : "success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
